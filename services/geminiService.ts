
import { GoogleGenAI } from "@google/genai";

const API_KEY = process.env.API_KEY;

if (!API_KEY) {
  // This will be caught by the app's error handling and displayed to the user.
  throw new Error("API_KEY environment variable not set. Please configure it to use the application.");
}

const ai = new GoogleGenAI({ apiKey: API_KEY });

/**
 * Converts a data URL string (e.g., from a canvas) into a Part object
 * that the Gemini API can understand.
 * @param dataUrl The data URL of the image.
 * @returns An object formatted for the Gemini API.
 */
const dataUrlToGeminiPart = (dataUrl: string) => {
  const match = dataUrl.match(/^data:(.+);base64,(.+)$/);
  if (!match) {
    throw new Error("Invalid data URL format");
  }

  const mimeType = match[1];
  const base64Data = match[2];

  return {
    inlineData: {
      mimeType,
      data: base64Data,
    },
  };
};

/**
 * Sends an image to the Gemini API and asks for a description in Spanish.
 * @param imageDataUrl The data URL of the image to interpret.
 * @returns A promise that resolves to the Spanish interpretation of the image.
 */
export const interpretImage = async (imageDataUrl: string): Promise<string> => {
  try {
    const imagePart = dataUrlToGeminiPart(imageDataUrl);
    const textPart = {
      text: "Describe esta imagen en español de forma vívida y detallada, como si se lo contaras a alguien que no puede verla."
    };

    const response = await ai.models.generateContent({
      model: 'gemini-2.5-flash',
      contents: { parts: [imagePart, textPart] },
      config: {
          temperature: 0.7,
      }
    });

    const text = response.text;
    if (!text) {
      throw new Error("No text was generated by the API.");
    }
    return text;
  } catch (error) {
    console.error("Error interpreting image with Gemini:", error);
    // Re-throw a more user-friendly error message.
    throw new Error("Failed to get interpretation from Gemini API.");
  }
};
